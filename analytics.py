import os
import sys
from datetime import datetime
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ get_connection() –∏—Å–ø–æ–ª—å–∑—É–µ—Ç psycopg2 –∏ DATABASE_URL
from database import get_connection 
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è DATABASE_URL
load_dotenv()

def run_analytics():
    print("=============================================================")
    print("         ‚ú® –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê PERFUME BOT ‚ú®")
    print("=============================================================")
    
    conn = None
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = get_connection()
        cur = conn.cursor()

        # ----------------------------------------------------
        # 1. –°–≤–æ–¥–∫–∞ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        # ----------------------------------------------------
        print("\n--- 1. –°–í–û–î–ö–ê –ü–û –ë–ê–ó–ï –î–ê–ù–ù–´–• –ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú ---")
        
        cur.execute("SELECT COUNT(*) FROM OriginalPerfume")
        print(f"‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤: {cur.fetchone()[0]}")

        cur.execute("SELECT COUNT(*) FROM CopyPerfume")
        print(f"‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–æ–Ω–æ–≤: {cur.fetchone()[0]}")

        cur.execute("SELECT COUNT(*) FROM UserMessages")
        total_messages = cur.fetchone()[0]
        print(f"‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–ª–æ–≥–æ–º): {total_messages}")

        cur.execute("SELECT COUNT(DISTINCT user_id) FROM UserMessages")
        unique_users = cur.fetchone()[0]
        print(f"‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}")
        
        # ----------------------------------------------------
        # 2. –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å (–ü–æ —á–∏—Å–ª—É –∫–ª–æ–Ω–æ–≤)
        # ----------------------------------------------------
        print("\n--- 2. –°–ê–ú–´–ï –ü–û–ü–£–õ–Ø–†–ù–´–ï –û–†–ò–ì–ò–ù–ê–õ–´ (–ü–û –ß–ò–°–õ–£ –ö–õ–û–ù–û–í) ---")
        # –û—Ä–∏–≥–∏–Ω–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∫–ª–æ–Ω–æ–≤ - –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        cur.execute("""
            SELECT 
                o.brand, 
                o.name, 
                COUNT(c.id) AS num_clones
            FROM OriginalPerfume o
            JOIN CopyPerfume c ON o.id = c.original_id
            GROUP BY o.id, o.brand, o.name
            ORDER BY num_clones DESC
            LIMIT 10
        """)
        popular_by_clone = cur.fetchall()

        for i, row in enumerate(popular_by_clone):
            print(f"  {i+1}. {row['brand']} - {row['name']} | –ö–ª–æ–Ω–æ–≤: {row['num_clones']}")

        # ----------------------------------------------------
        # 3. –≠–∫–æ–Ω–æ–º–∏—è
        # ----------------------------------------------------
        print("\n--- 3. –¢–û–ü-5 –ö–õ–û–ù–û–í –° –ù–ê–ò–ë–û–õ–¨–®–ï–ô –≠–ö–û–ù–û–ú–ò–ï–ô (saved_amount) ---")
        cur.execute("""
            SELECT 
                c.brand, 
                c.name, 
                c.saved_amount, 
                o.brand AS original_brand, 
                o.name AS original_name
            FROM CopyPerfume c
            JOIN OriginalPerfume o ON c.original_id = o.id
            WHERE c.saved_amount IS NOT NULL
            ORDER BY c.saved_amount DESC NULLS LAST 
            LIMIT 5
        """)
        top_savings = cur.fetchall()

        if top_savings:
            for i, row in enumerate(top_savings):
                saved_amount = f"{row['saved_amount']:.2f}%" if row['saved_amount'] is not None else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                print(f"  {i+1}. {row['brand']} {row['name']} -> {row['original_brand']} {row['original_name']} | –≠–∫–æ–Ω–æ–º–∏—è: {saved_amount}")
        else:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —ç–∫–æ–Ω–æ–º–∏–∏ (saved_amount).")
            
        # ----------------------------------------------------
        # 4. –°–∞–º—ã–µ –∏—Å–∫–æ–º—ã–µ –ø–∞—Ä—Ñ—é–º—ã (–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        # ----------------------------------------------------
        print("\n--- 4. –°–ê–ú–´–ï –ò–°–ö–û–ú–´–ï –ü–ê–†–§–Æ–ú–´ (–¢–û–ü-10 –£–°–ü–ï–®–ù–´–• –ó–ê–ü–†–û–°–û–í) ---")
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–∞—Ä—Ñ—é–º –∏–∑ –ª–æ–≥–∞ status='success'
        cur.execute("""
            SELECT 
                TRIM(SUBSTRING(notes FROM 'Found: (.*)')) AS found_perfume, 
                COUNT(*) AS success_count
            FROM UserMessages
            WHERE status = 'success' AND notes LIKE 'Found: %%'
            GROUP BY found_perfume
            ORDER BY success_count DESC
            LIMIT 10
        """)
        top_searched = cur.fetchall()
        
        for i, row in enumerate(top_searched):
            # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –∑–∞–º–µ—Ç–∫–∏ NOTE, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
            perfume_name = row['found_perfume'].split(' | NOTE: ')[0] 
            print(f"  {i+1}. {perfume_name} | –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: {row['success_count']}")

        # ----------------------------------------------------
        # 5. –°–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π (–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –±–∞–∑—ã)
        # ----------------------------------------------------
        print("\n--- 5. –¢–û–ü-10 –ù–ï–£–°–ü–ï–®–ù–´–• –ó–ê–ü–†–û–°–û–í (–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É) ---")
        # –ß—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —á–∞—â–µ –≤—Å–µ–≥–æ –∏—â—É—Ç, –Ω–æ –Ω–µ –Ω–∞—Ö–æ–¥—è—Ç (status = 'fail')
        cur.execute("""
            SELECT 
                message, 
                COUNT(*) AS fail_count,
                MAX(notes) AS last_note
            FROM UserMessages
            WHERE status = 'fail' AND message NOT IN ('/start')
            GROUP BY message
            ORDER BY fail_count DESC
            LIMIT 10
        """)
        top_fails = cur.fetchall()
        
        for i, row in enumerate(top_fails):
            msg_preview = row['message'][:50] + '...' if len(row['message']) > 50 else row['message']
            print(f"  {i+1}. '{msg_preview}' | –û—à–∏–±–æ–∫: {row['fail_count']} | –ü—Ä–∏—á–∏–Ω–∞: {row['last_note']}")

        # ----------------------------------------------------
        # 6. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        # ----------------------------------------------------
        print("\n--- 6. –¢–û–ü-5 –°–ê–ú–´–• –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô (–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è) ---")
        cur.execute("""
            SELECT 
                user_id, 
                COUNT(*) AS total_msgs,
                MAX(timestamp) AS last_activity
            FROM UserMessages
            GROUP BY user_id
            ORDER BY total_msgs DESC
            LIMIT 5
        """)
        top_users = cur.fetchall()

        for i, row in enumerate(top_users):
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ PostgreSQL –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            last_active_dt = row['last_activity'].strftime('%Y-%m-%d %H:%M:%S')
            print(f"  {i+1}. User ID: {row['user_id']} | –°–æ–æ–±—â–µ–Ω–∏–π: {row['total_msgs']} | –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active_dt}")


    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ä–µ–¥—ã **DATABASE_URL** –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞.")
        sys.exit(1)
    finally:
        if conn:
            conn.close()
        print("\n=============================================================")
        print("          ‚ú® –ê–ù–ê–õ–ò–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ‚ú®")
        print("=============================================================")

if __name__ == '__main__':
    run_analytics()